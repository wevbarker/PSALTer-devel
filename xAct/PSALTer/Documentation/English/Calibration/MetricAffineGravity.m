(*=======================*)
(*  MetricAffineGravity  *)
(*=======================*)

Title@"Metric affine gravity (MAG)";

Supercomment@"We will test the MetricAffineGravity module.";

Get@FileNameJoin@{NotebookDirectory[],"Calibration","MetricAffineGravity","FieldStrengthTensors.m"};
Get@FileNameJoin@{NotebookDirectory[],"Calibration","MetricAffineGravity","NonlinearLagrangian.m"};

(*============================*)
(*  Einstein-Hilbert theory   *)
(*============================*)

Section@"Einstein-Hilbert theory";

Comment@"The first theory we will look at is the simple Einstein-Hilbert case.";

LinearLagrangian=Measure*NonlinearLagrangian/.{A1->0,A2->0,A3->0,A4->0,A5->0,A6->0,A7->0,A8->0,A9->0,A10->0,A11->0,C1->0,C2->0,C3->0,C4->0,C5->0,C6->0,C7->0,C8->0,C9->0,C10->0,C11->0,C12->0,C13->0,C14->0,C15->0,C16->0};

DisplayExpression@LinearLagrangian;

Comment@"Now we linearize it.";

LinearLagrangian//=LineariseLagrangian;
DisplayExpression@LinearLagrangian;
(*
ParticleSpectrum[NewLinearLagrangian,
		ClassName->"MetricAffineGravity",
		TheoryName->"EinsteinHilbertTheory",	
		Method->"Easy",
		MaxLaurentDepth->1];

Comment@"This completes the spectral analysis. We find that there are no massive poles, and hence no massive gravitons. There are however two massless degrees of freedom which we take to be the graviton polarisations. The unitarity conditions of these polarisations just make sure that the Einstein--Hilbert coupling carries the right sign, i.e. that the square of the Planck mass is positive. As usual with the PSALTer output, the unitarity conditions also stipulate that the energy (p) of the graviton be a real number, i.e. that its square be positive. This trivial condition typically accompanies the (non-trivial) unitarity condition(s) on the Lagrangian parameters, and is quite natural.";

Supercomment@"What about the source constraints? Stephanie wanted an in-depth discussion of where these came from. These constraints can be decoded as a consequence of the diffeomorphism and projective gauge symmetries of the theory, though it takes a bit of manipulation to see this because in their current form they are expressed in terms of the `cryptic' reduced-index spin-parity modes.";

Get@FileNameJoin@{NotebookDirectory[],"EinsteinHilbertTheory.thr.mx"};

DecomposedSourceConstraints=EinsteinHilbertTheory@SourceConstraints;
DisplayEquation/@DecomposedSourceConstraints;

Comment@"Let's expand these in terms of the original source currents which are conjugate to the metric (Einstein stress-energy tensor) and the asymmetric connection (a nameless three-index source which is a combination of the matter spin tensor and the matter dilaton current), both contracted with the momentum in various places.";

DecomposedSourceConstraints=(MetricAffineGravity@xAct`PSALTer`Private`ExpandSources)/@DecomposedSourceConstraints;
DecomposedSourceConstraints=DecomposedSourceConstraints/.xAct`PSALTer`Private`ToP;
DecomposedSourceConstraints=(ToCanonical)/@DecomposedSourceConstraints;
DecomposedSourceConstraints=(ScreenDollarIndices)/@DecomposedSourceConstraints;
DisplayEquation/@DecomposedSourceConstraints;

Comment@"That is somewhat clearer. Now add the first and last pairs of constraints.";

ProjectiveSourceConstraints={
	DecomposedSourceConstraints[[1]]+3*DecomposedSourceConstraints[[2]],
	DecomposedSourceConstraints[[3]]+2*DecomposedSourceConstraints[[4]]
};
ProjectiveSourceConstraints=(ToCanonical)/@ProjectiveSourceConstraints;
ProjectiveSourceConstraints=(ScreenDollarIndices)/@ProjectiveSourceConstraints;
DisplayEquation/@ProjectiveSourceConstraints;

Comment@"This leads to a simple covariant expression in the rank-three source alone, which we notice immediately is generated by none other than the projective symmetry in Equation (2.16) on page 7 of arXiv:1912.01023.";

ProjectiveSourceConstraints=(1/(3*Def^2))*{ReplaceDummies@(ProjectiveSourceConstraints[[1]])*P[a]+Def*ProjectiveSourceConstraints[[2]]};

ProjectiveSourceConstraints=(ToCanonical)/@ProjectiveSourceConstraints;
ProjectiveSourceConstraints=(ScreenDollarIndices)/@ProjectiveSourceConstraints;
DisplayEquation/@ProjectiveSourceConstraints;

Comment@"This projective symmetry is to be expected, if we examine the parameter conditions in Equation (2.18) on page 7 of arXiv:1912.01023";

Comment@"Now we add the first and last pairs of constraints. Up to the projective symmetry above, this is a joint constraint on the connection source and the stress-energy tensor. It looks to be generated by precisely the diffeomorphism gauge symmetry Equation (2.14) on page 6 of arXiv:1912.01023, and in fact the constraint itself is written out for us in Equation (4.10) on page 14 of arXiv:1912.01023.";

ProjectiveSourceConstraints=(-1/3)*{
	ReplaceDummies@(DecomposedSourceConstraints[[1]])*P[a]+Def*DecomposedSourceConstraints[[4]]
};
ProjectiveSourceConstraints=(ToCanonical)/@ProjectiveSourceConstraints;
ProjectiveSourceConstraints=(ScreenDollarIndices)/@ProjectiveSourceConstraints;
DisplayEquation/@ProjectiveSourceConstraints;

Comment@"Note that the diffeomorphism gauge symmetry is always present in MAG, so we don't need to carefully check parameter conditions.";

Comment@"Now, we've recovered these (expected) symmetries through their constraints on the conjugate source currents. It would be satisfying if we could go back and show that the linearized Lagrangian itself is symmetric under the relevant transformations.";

Comment@"First we will try the projective symmetry. Here are the infinitesimal transformations suggested by Equation (3.4) on page 8 of arXiv:1912.01023.";

DefTensor[DiffPhi[-a],M4,PrintAs->"\[Xi]"];
DefConstantSymbol[Pert,PrintAs->"\[Epsilon]"];

ToPerturb=Join[
	MakeRule[{MetricPerturbation[-a,-b],MetricPerturbation[-a,-b]+Pert*CD[-a]@DiffPhi[-b]+Pert*CD[-b]@DiffPhi[-a]},MetricOn->All,ContractMetrics->True],
	MakeRule[{Connection[-a,-b,-c],Connection[-a,-b,-c]+Pert*CD[-a]@CD[-c]@DiffPhi[-b]},MetricOn->All,ContractMetrics->True]
];

Expr={MetricPerturbation[-a,-b],Connection[-a,-b,-c]};
DisplayExpression@Expr;
Expr=Expr/.ToPerturb;
Expr=ToCanonical/@Expr;
DisplayExpression@Expr;

Comment@"Now let's see how the linearized Lagrangian transforms at first order.";

PertLagrangian=LinearLagrangian/.ToPerturb;
PertLagrangian=Coefficient[PertLagrangian,Pert,1];
DisplayExpression@PertLagrangian;

Comment@"This looks non-trivial, but if we take the variational derivative with respect to the vector field which generates the diffeomorphism, we see that the whole thing vanishes.";

PertLagrangian=VarD[DiffPhi[a],CD]@PertLagrangian;
PertLagrangian//=ToCanonical;
PertLagrangian//=SortCovDs;
PertLagrangian//=ContractMetric;
PertLagrangian//=CollectTensors;
PertLagrangian//=ScreenDollarIndices;
DisplayExpression@PertLagrangian;

Comment@"Now we would like to try the same thing with the projective symmetry. Again we set up the infinitesimal transformation, this time as suggested by Equation (2.16) on page 7 of arXiv:1912.01023.";

DefTensor[ProjPhi[-a],M4,PrintAs->"\[Lambda]"];

ToPerturb=MakeRule[{Connection[-m,r,-n],Connection[-m,r,-n]+Pert*ProjPhi[-m]*G[r,-n]},MetricOn->All,ContractMetrics->True];

Expr={MetricPerturbation[-a,-b],Connection[-a,-b,-c]};
DisplayExpression@Expr;
Expr=Expr/.ToPerturb;
Expr=ToCanonical/@Expr;
DisplayExpression@Expr;

Comment@"Now let's see how the linearized Lagrangian transforms at first order.";

LinearLagrangian=LinearLagrangian/.ToPerturb;
LinearLagrangian=Coefficient[LinearLagrangian,Pert,1];
DisplayExpression@LinearLagrangian;

Comment@"Again this looks non-trivial, but if we take the variational derivative with respect to the vector field which generates the projective transformation, we see that the whole thing vanishes.";

LinearLagrangian=VarD[ProjPhi[a],CD]@LinearLagrangian;
LinearLagrangian//=ToCanonical;
LinearLagrangian//=SortCovDs;
LinearLagrangian//=ContractMetric;
LinearLagrangian//=CollectTensors;
LinearLagrangian//=ScreenDollarIndices;
DisplayExpression@LinearLagrangian;

Comment@"These results are quite satisfying, and hopefully illustrate how easy it is to `probe' the Lagrangian for extra symmetries using computer algebra.";
*)

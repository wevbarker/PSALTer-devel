(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Code::Initialization:: *)
PSymb="\[ScriptK]";
DefConstantSymbol[Def,PrintAs->PSymb];


(* ::Code::Initialization:: *)
DefTensor[P[i],M4,PrintAs->PSymb];
AutomaticRules[P,MakeRule[{CD[-a][P[-b]],0},MetricOn->All,ContractMetrics->True]];
ToV=MakeRule[{P[-i],Def V[-i]},MetricOn->All,ContractMetrics->True];
ToP=MakeRule[{V[-i],P[-i]/Def},MetricOn->All,ContractMetrics->True];


(* ::Code::Initialization:: *)
PatchA2m=MakeRule[{AP2m[-a,-c,-b]AP2m[a,b,c],(1/2)AP2m[-a,-b,-c]AP2m[a,b,c]},MetricOn->All,ContractMetrics->True];
PatchA2mD1=MakeRule[{Evaluate[Dagger@AP2m[-a,-c,-b]AP2m[a,b,c]],Evaluate[(1/2)Dagger@AP2m[-a,-b,-c]AP2m[a,b,c]]},MetricOn->All,ContractMetrics->True];
PatchA2mD2=MakeRule[{Evaluate[AP2m[-a,-c,-b]Dagger@AP2m[a,b,c]],Evaluate[(1/2)AP2m[-a,-b,-c]Dagger@AP2m[a,b,c]]},MetricOn->All,ContractMetrics->True];
PatchSigma2m=MakeRule[{SigmaP2m[-a,-c,-b]SigmaP2m[a,b,c],(1/2)SigmaP2m[-a,-b,-c]SigmaP2m[a,b,c]},MetricOn->All,ContractMetrics->True];
Patch2m=Join[PatchA2m,PatchA2mD1,PatchA2mD2,PatchSigma2m];
